// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;
using Test.Api.Data;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Test.Api.Migrations.EfModel
{
    [EntityFrameworkInternal]
    public partial class TodoEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Test.Api.Data.TodoEntity",
                typeof(TodoEntity),
                baseEntityType,
                propertyCount: 5,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(TodoEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TodoEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.SetGetter(
                long (TodoEntity entity) => TodoEntityUnsafeAccessors.Id(entity),
                bool (TodoEntity entity) => TodoEntityUnsafeAccessors.Id(entity) == 0L,
                long (TodoEntity instance) => TodoEntityUnsafeAccessors.Id(instance),
                bool (TodoEntity instance) => TodoEntityUnsafeAccessors.Id(instance) == 0L);
            id.SetSetter(
                (TodoEntity entity, long value) => TodoEntityUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (TodoEntity entity, long value) => TodoEntityUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                long (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<long>(0) : (entry.FlaggedAsTemporary(0) && TodoEntityUnsafeAccessors.Id(((TodoEntity)(entry.Entity))) == 0L ? entry.ReadTemporaryValue<long>(0) : TodoEntityUnsafeAccessors.Id(((TodoEntity)(entry.Entity))))),
                long (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.Id(((TodoEntity)(entry.Entity))),
                long (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(id, 0),
                long (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<long>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<long>(id));
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(TodoEntity).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TodoEntity).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            createdAt.SetGetter(
                DateTimeOffset (TodoEntity entity) => TodoEntityUnsafeAccessors.CreatedAt(entity),
                bool (TodoEntity entity) => TodoEntityUnsafeAccessors.CreatedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (TodoEntity instance) => TodoEntityUnsafeAccessors.CreatedAt(instance),
                bool (TodoEntity instance) => TodoEntityUnsafeAccessors.CreatedAt(instance).EqualsExact(default(DateTimeOffset)));
            createdAt.SetSetter(
                (TodoEntity entity, DateTimeOffset value) => TodoEntityUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetMaterializationSetter(
                (TodoEntity entity, DateTimeOffset value) => TodoEntityUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.CreatedAt(((TodoEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.CreatedAt(((TodoEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(createdAt, 1),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(createdAt),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            createdAt.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            createdAt.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    bool (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    int (DateTimeOffset v) => ((object)v).GetHashCode(),
                    DateTimeOffset (DateTimeOffset v) => v),
                clrType: typeof(DateTimeOffset),
                jsonValueReaderWriter: new NpgsqlTimestampTzTypeMapping.NpgsqlJsonTimestampTzDateTimeOffsetReaderWriter());
            createdAt.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            createdAt.AddAnnotation("Relational:ColumnType", "timestamp with time zone");

            var dueBy = runtimeEntityType.AddProperty(
                "DueBy",
                typeof(DateOnly?),
                propertyInfo: typeof(TodoEntity).GetProperty("DueBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TodoEntity).GetField("<DueBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            dueBy.SetGetter(
                DateOnly? (TodoEntity entity) => TodoEntityUnsafeAccessors.DueBy(entity),
                bool (TodoEntity entity) => !(TodoEntityUnsafeAccessors.DueBy(entity).HasValue),
                DateOnly? (TodoEntity instance) => TodoEntityUnsafeAccessors.DueBy(instance),
                bool (TodoEntity instance) => !(TodoEntityUnsafeAccessors.DueBy(instance).HasValue));
            dueBy.SetSetter(
                (TodoEntity entity, DateOnly? value) => TodoEntityUnsafeAccessors.DueBy(entity) = value);
            dueBy.SetMaterializationSetter(
                (TodoEntity entity, DateOnly? value) => TodoEntityUnsafeAccessors.DueBy(entity) = value);
            dueBy.SetAccessors(
                DateOnly? (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.DueBy(((TodoEntity)(entry.Entity))),
                DateOnly? (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.DueBy(((TodoEntity)(entry.Entity))),
                DateOnly? (InternalEntityEntry entry) => entry.ReadOriginalValue<DateOnly?>(dueBy, 2),
                DateOnly? (InternalEntityEntry entry) => entry.GetCurrentValue<DateOnly?>(dueBy),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            dueBy.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dueBy.TypeMapping = NpgsqlDateOnlyTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateOnly>(
                    bool (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    int (DateOnly v) => ((object)v).GetHashCode(),
                    DateOnly (DateOnly v) => v),
                keyComparer: new ValueComparer<DateOnly>(
                    bool (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    int (DateOnly v) => ((object)v).GetHashCode(),
                    DateOnly (DateOnly v) => v),
                providerValueComparer: new ValueComparer<DateOnly>(
                    bool (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    int (DateOnly v) => ((object)v).GetHashCode(),
                    DateOnly (DateOnly v) => v));
            dueBy.SetComparer(new NullableValueComparer<DateOnly>(dueBy.TypeMapping.Comparer));
            dueBy.SetKeyComparer(new NullableValueComparer<DateOnly>(dueBy.TypeMapping.KeyComparer));
            dueBy.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            dueBy.AddAnnotation("Relational:ColumnType", "date");

            var isComplete = runtimeEntityType.AddProperty(
                "IsComplete",
                typeof(bool),
                propertyInfo: typeof(TodoEntity).GetProperty("IsComplete", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TodoEntity).GetField("<IsComplete>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isComplete.SetGetter(
                bool (TodoEntity entity) => TodoEntityUnsafeAccessors.IsComplete(entity),
                bool (TodoEntity entity) => TodoEntityUnsafeAccessors.IsComplete(entity) == false,
                bool (TodoEntity instance) => TodoEntityUnsafeAccessors.IsComplete(instance),
                bool (TodoEntity instance) => TodoEntityUnsafeAccessors.IsComplete(instance) == false);
            isComplete.SetSetter(
                (TodoEntity entity, bool value) => TodoEntityUnsafeAccessors.IsComplete(entity) = value);
            isComplete.SetMaterializationSetter(
                (TodoEntity entity, bool value) => TodoEntityUnsafeAccessors.IsComplete(entity) = value);
            isComplete.SetAccessors(
                bool (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.IsComplete(((TodoEntity)(entry.Entity))),
                bool (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.IsComplete(((TodoEntity)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isComplete, 3),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isComplete),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            isComplete.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            isComplete.TypeMapping = NpgsqlBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v));
            isComplete.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            isComplete.AddAnnotation("Relational:ColumnType", "boolean");

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(TodoEntity).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TodoEntity).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 1000);
            title.SetGetter(
                string (TodoEntity entity) => TodoEntityUnsafeAccessors.Title(entity),
                bool (TodoEntity entity) => TodoEntityUnsafeAccessors.Title(entity) == null,
                string (TodoEntity instance) => TodoEntityUnsafeAccessors.Title(instance),
                bool (TodoEntity instance) => TodoEntityUnsafeAccessors.Title(instance) == null);
            title.SetSetter(
                (TodoEntity entity, string value) => TodoEntityUnsafeAccessors.Title(entity) = value);
            title.SetMaterializationSetter(
                (TodoEntity entity, string value) => TodoEntityUnsafeAccessors.Title(entity) = value);
            title.SetAccessors(
                string (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.Title(((TodoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => TodoEntityUnsafeAccessors.Title(((TodoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(title, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(title),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            title.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            title.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "character varying(1000)",
                    size: 1000));
            title.TypeMapping = ((NpgsqlStringTypeMapping)title.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        title.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

        var key = runtimeEntityType.AddKey(
            new[] { id });
        runtimeEntityType.SetPrimaryKey(key);

        return runtimeEntityType;
    }

    public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
    {
        var id = runtimeEntityType.FindProperty("Id");
        var createdAt = runtimeEntityType.FindProperty("CreatedAt");
        var dueBy = runtimeEntityType.FindProperty("DueBy");
        var isComplete = runtimeEntityType.FindProperty("IsComplete");
        var title = runtimeEntityType.FindProperty("Title");
        var key = runtimeEntityType.FindKey(new[] { id });
        key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<long>(key));
        key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<long>(key));
        runtimeEntityType.SetOriginalValuesFactory(
            ISnapshot (InternalEntityEntry source) =>
            {
                var entity = ((TodoEntity)(source.Entity));
                return ((ISnapshot)(new Snapshot<long, DateTimeOffset, DateOnly?, bool, string>(((ValueComparer<long>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<long>(id)), ((ValueComparer<DateTimeOffset>)(((IProperty)createdAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(createdAt)), (source.GetCurrentValue<DateOnly?>(dueBy) == null ? null : ((ValueComparer<DateOnly?>)(((IProperty)dueBy).GetValueComparer())).Snapshot(source.GetCurrentValue<DateOnly?>(dueBy))), ((ValueComparer<bool>)(((IProperty)isComplete).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isComplete)), (source.GetCurrentValue<string>(title) == null ? null : ((ValueComparer<string>)(((IProperty)title).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(title))))));
            });
        runtimeEntityType.SetStoreGeneratedValuesFactory(
            ISnapshot () => ((ISnapshot)(new Snapshot<long>(((ValueComparer<long>)(((IProperty)id).GetValueComparer())).Snapshot(default(long))))));
        runtimeEntityType.SetTemporaryValuesFactory(
            ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<long>(default(long)))));
        runtimeEntityType.SetShadowValuesFactory(
            ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
        runtimeEntityType.SetEmptyShadowValuesFactory(
            ISnapshot () => Snapshot.Empty);
        runtimeEntityType.SetRelationshipSnapshotFactory(
            ISnapshot (InternalEntityEntry source) =>
            {
                var entity = ((TodoEntity)(source.Entity));
                return ((ISnapshot)(new Snapshot<long>(((ValueComparer<long>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<long>(id)))));
            });
        runtimeEntityType.Counts = new PropertyCounts(
            propertyCount: 5,
            navigationCount: 0,
            complexPropertyCount: 0,
            originalValueCount: 5,
            shadowCount: 0,
            relationshipCount: 1,
            storeGeneratedCount: 1);
        runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
        runtimeEntityType.AddAnnotation("Relational:Schema", "todos");
        runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
        runtimeEntityType.AddAnnotation("Relational:TableName", "todos");
        runtimeEntityType.AddAnnotation("Relational:ViewName", null);
        runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

        Customize(runtimeEntityType);
    }

    static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
