// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Update.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Test.Api.Migrations.EfModel
{
    public partial class TodosContextModel
    {
        private TodosContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("4b1215f4-30fe-4bd9-8fcd-23214fd57aa0"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var todoEntity = TodoEntityEntityType.Create(this);

            TodoEntityEntityType.CreateAnnotations(todoEntity);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "9.0.4");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var todoEntity = FindEntityType("Test.Api.Data.TodoEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            todoEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var testApiDataTodoEntityTableBase = new TableBase("Test.Api.Data.TodoEntity", null, relationalModel);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "timestamp with time zone", testApiDataTodoEntityTableBase);
            testApiDataTodoEntityTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var dueByColumnBase = new ColumnBase<ColumnMappingBase>("DueBy", "date", testApiDataTodoEntityTableBase)
            {
                IsNullable = true
            };
            testApiDataTodoEntityTableBase.Columns.Add("DueBy", dueByColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "bigint", testApiDataTodoEntityTableBase);
            testApiDataTodoEntityTableBase.Columns.Add("Id", idColumnBase);
            var isCompleteColumnBase = new ColumnBase<ColumnMappingBase>("IsComplete", "boolean", testApiDataTodoEntityTableBase);
            testApiDataTodoEntityTableBase.Columns.Add("IsComplete", isCompleteColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "character varying(1000)", testApiDataTodoEntityTableBase);
            testApiDataTodoEntityTableBase.Columns.Add("Title", titleColumnBase);
            relationalModel.DefaultTables.Add("Test.Api.Data.TodoEntity", testApiDataTodoEntityTableBase);
            var testApiDataTodoEntityMappingBase = new TableMappingBase<ColumnMappingBase>(todoEntity, testApiDataTodoEntityTableBase, null);
            testApiDataTodoEntityTableBase.AddTypeMapping(testApiDataTodoEntityMappingBase, false);
            defaultTableMappings.Add(testApiDataTodoEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, todoEntity.FindProperty("Id")!, testApiDataTodoEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, todoEntity.FindProperty("CreatedAt")!, testApiDataTodoEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dueByColumnBase, todoEntity.FindProperty("DueBy")!, testApiDataTodoEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isCompleteColumnBase, todoEntity.FindProperty("IsComplete")!, testApiDataTodoEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, todoEntity.FindProperty("Title")!, testApiDataTodoEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            todoEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var todosTable = new Table("todos", "todos", relationalModel);
            var idColumn = new Column("Id", "bigint", todosTable);
            todosTable.Columns.Add("Id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<long>(idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var createdAtColumn = new Column("CreatedAt", "timestamp with time zone", todosTable);
            todosTable.Columns.Add("CreatedAt", createdAtColumn);
            createdAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(createdAtColumn);
            var dueByColumn = new Column("DueBy", "date", todosTable)
            {
                IsNullable = true
            };
            todosTable.Columns.Add("DueBy", dueByColumn);
            dueByColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateOnly>(dueByColumn);
            var isCompleteColumn = new Column("IsComplete", "boolean", todosTable);
            todosTable.Columns.Add("IsComplete", isCompleteColumn);
            isCompleteColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<bool>(isCompleteColumn);
            var titleColumn = new Column("Title", "character varying(1000)", todosTable);
            todosTable.Columns.Add("Title", titleColumn);
            titleColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(titleColumn);
            relationalModel.Tables.Add(("todos", "todos"), todosTable);
            var todosTableMapping = new TableMapping(todoEntity, todosTable, null);
            todosTable.AddTypeMapping(todosTableMapping, false);
            tableMappings.Add(todosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, todoEntity.FindProperty("Id")!, todosTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, todoEntity.FindProperty("CreatedAt")!, todosTableMapping);
            RelationalModel.CreateColumnMapping(dueByColumn, todoEntity.FindProperty("DueBy")!, todosTableMapping);
            RelationalModel.CreateColumnMapping(isCompleteColumn, todoEntity.FindProperty("IsComplete")!, todosTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, todoEntity.FindProperty("Title")!, todosTableMapping);
            var pK_todos = new UniqueConstraint("PK_todos", todosTable, new[] { idColumn });
            todosTable.PrimaryKey = pK_todos;
            pK_todos.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<long>(pK_todos));
            var pK_todosKey = RelationalModel.GetKey(this,
                "Test.Api.Data.TodoEntity",
                new[] { "Id" });
            pK_todos.MappedKeys.Add(pK_todosKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_todosKey).Add(pK_todos);
            todosTable.UniqueConstraints.Add("PK_todos", pK_todos);
            return relationalModel.MakeReadOnly();
        }
    }
}
